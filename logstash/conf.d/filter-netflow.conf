# Filter output from nfdump piped

filter {

  if "nfdump" in [tags] {

    grok {
      add_tag => [ "netflow_grok" ]
      match => [ "message", "(?<N1>\d+)\|(?<tstart>\d+)\|(?<mstart>\d+)\|(?<tend>\d+)\|(?<mend>\d+)\|(?<proto>\d+)\|(?<N2>\d+)\|(?<N3>\d+)\|(?<N4>\d+)\|(?<srcip>\d+)\|(?<srcp>\d+)\|(?<N5>\d+)\|(?<N6>\d+)\|(?<N7>\d+)\|(?<dstip>\d+)\|(?<dstp>\d+)\|(?<N8>\d+)\|(?<N9>\d+)\|(? <N10>\d+)\|(?<N11>\d+)\|(?<flags>\d+)\|(?<tos>\d+)\|(?<packets>\d+)\|(?<bytes>\d+)" ]
    }
    ruby {
      code => 'event["srcip_dotted"] = [event["srcip"].to_i].pack("N").unpack("C4").join(".")'
    }
    ruby {
      code => 'event["dstip_dotted"] = [event["dstip"].to_i].pack("N").unpack("C4").join(".")'
    }
    mutate {
      replace => [ "srcip", "%{srcip_dotted}" ]
    }
    mutate {
      replace => [ "dstip", "%{dstip_dotted}" ]
    }
    mutate {
      remove_field => [ "srcip_dotted", "dstip_dotted" ]
    }
    date {
      match => [ "tstart", "UNIX" ]
    }
    geoip {
      source => "srcip"
      target => "src_geoip"
    }
    geoip {
      source => "dstip"
      target => "dst_geoip"
    }

  } 

}

